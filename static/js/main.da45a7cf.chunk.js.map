{"version":3,"sources":["AccountSelector.jsx","BlockNumber.jsx","TokenQuery.jsx","DeveloperConsole.jsx","Metadata.jsx","NodeInfo.jsx","Events.jsx","TxButton.jsx","Deposit.jsx","Transfer.jsx","Withdraw.jsx","index.jsx","App.jsx"],"names":["NodeInfo","props","keyring","setAccountAddress","api","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","map","account","key","address","value","text","meta","name","toUpperCase","icon","initialAddress","length","useEffect","query","balances","Menu","attached","tabular","style","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","Icon","circular","color","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","extRoot","setExtRoot","stateRoot","setStateRoot","bestNumber","derive","chain","bestNumberFinalized","getHeader","rpc","unsubscribeAll","number","toNumber","header","extrinsicsRoot","toHex","substring","then","unsub","catch","console","error","timer","time","id","setInterval","clearInterval","Grid","Column","Card","Content","textAlign","Statistic","label","extra","Row","TokenQuery","accounts","output","setOutput","tokenId","formState","setFormState","runQuery","a","plasmaCash","tokens","result","isNone","owner_text","receiver","unwrap","filter","toString","Form","Header","Description","Field","Input","data","state","fluid","type","Button","onClick","primary","Metadata","util","require","util_crypto","window","metadata","setMetadata","version","setVersion","getMetadata","Meta","Modal","trigger","scrolling","JSON","stringify","nodeInfo","setNodeInfo","Promise","all","system","nodeName","nodeVersion","e","href","Events","eventFeed","setEventFeed","events","forEach","record","event","phase","types","typeDef","eventName","section","method","params","index","includes","feedEvent","date","summary","extraText","documentation","join","content","Feed","overflow","maxHeight","TxButton","accountPair","setStatus","tx","disabled","makeCall","source","isInjected","web3FromSource","injected","fromParam","setSigner","signer","signAndSend","status","isFinalized","blockHash","asFinalized","substr","Extrinsics","defaultTransaction","createType","token_id","prev_blk_num","sender","signature","transaction","setTransaction","onChangeToken","token","prevTxn","unsignedTxn","sign","blake2AsU8a","toU8a","deposit","receiverId","transfer","withdraw","ReactDOM","render","setApi","apiReady","setApiReady","accountLoaded","setAccountLoaded","accountAddress","getPair","provider","WsProvider","ApiPromise","create","isReady","web3Enable","extensions","web3Accounts","injectedAccounts","loadAccounts","loadAll","isDevelopment","loader","Dimmer","active","Loader","contextRef","createRef","ref","Sticky","context","divided","columns","stretched","document","getElementById"],"mappings":"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","file":"static/js/main.da45a7cf.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {\n  Menu,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n} from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { keyring, setAccountAddress, api } = props;\n  const [accountSelected, setAccountSelected] = useState(\"\");\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: \"user\"\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : \"\";\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    return () => unsubscribe && unsubscribe();\n  }, [accountSelected, api.query.balances]);\n\n  return (\n    <Menu\n      attached=\"top\"\n      tabular\n      style={{\n        backgroundColor: \"#fff\",\n        borderColor: \"#fff\",\n        paddingTop: \"1em\",\n        paddingBottom: \"1em\"\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src=\"Substrate-Logo.png\" size=\"mini\" />\n        </Menu.Menu>\n        <Menu.Menu position=\"right\">\n          <Icon\n            name=\"users\"\n            size=\"large\"\n            circular\n            color={accountSelected ? \"green\" : \"red\"}\n          ></Icon>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder=\"Select an account\"\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Statistic, Grid, Card, Icon } from \"semantic-ui-react\";\n\nexport default function BlockNumber(props) {\n  const { api, finalized } = props;\n\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const [extRoot, setExtRoot] = useState(0);\n  const [stateRoot, setStateRoot] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  const getHeader = api.rpc.chain.getHeader;\n\n  useEffect(() => {\n    let unsubscribeAll;\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n        // Populate State and Ext roots\n        getHeader(header => {\n            let extRoot = header.extrinsicsRoot.toHex();\n            setExtRoot(extRoot.substring(0, 6) + \"....\"\n                       + extRoot.substring(62, 66));\n            let stateRoot = header.stateRoot.toHex();\n            setStateRoot(stateRoot.substring(0, 6) + \"....\"\n                         + stateRoot.substring(62, 66));\n        });\n    })\n    .then(unsub => {\n      unsubscribeAll = unsub;\n    })\n    .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber, getHeader]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <>\n      <Grid.Column>\n        <Card>\n          <Card.Content textAlign=\"center\">\n            <Statistic\n              label={(finalized ? \"Finalized\" : \"Current\") + \" Block Number\"}\n              value={blockNumber}\n            />\n          </Card.Content>\n          <Card.Content extra>\n            <Grid.Column>\n              <Grid.Row>\n                <Icon name=\"envelope\" /> {extRoot}\n              </Grid.Row>\n              <Grid.Row>\n                <Icon name=\"save\" /> {stateRoot}\n              </Grid.Row>\n              <Grid.Row>\n                <Icon name=\"time\" /> {blockNumberTimer}\n              </Grid.Row>\n            </Grid.Column>\n          </Card.Content>\n        </Card>\n      </Grid.Column>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Card, Grid, Form, Button, Input } from \"semantic-ui-react\";\n\nexport default function TokenQuery(props) {\n  const { accounts, api } = props;\n\n  const [output, setOutput] = useState(\"\");\n\n  const initialState = {\n    tokenId: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { tokenId } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  const runQuery = async () => {\n    try {\n      let result = await api.query.plasmaCash.tokens(tokenId);\n      let owner_text;\n      if (!result.isNone) {\n          let receiver = result.unwrap().receiver;\n          let account = accounts.filter(account => (account.address === receiver.toString()));\n          owner_text = account.length === 1 ? \"Owner: \" + account[0].name : \"Lookup failed!\";\n      } else {\n          owner_text = \"No one owns it!\";\n      }\n      setOutput(owner_text);\n    } catch (e) {\n\t\tsetOutput(e.toString())\n\t}\n  };\n\n  return (\n    <Grid.Column>\n      <Form>\n        <Card>\n          <Card.Content>\n            <Card.Header>Token Ownership</Card.Header>\n            <Card.Description>\n              <Form.Field>\n                <Input\n                  onChange={onChange}\n                  label=\"Token ID\"\n                  fluid\n                  placeholder=\"ID of Token\"\n                  state=\"tokenId\"\n                  type=\"text\"\n                  value={tokenId}\n                />\n              </Form.Field>\n            </Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <Form.Field>\n              <Button onClick={runQuery} primary type=\"submit\">\n                Query\n              </Button>{\" \"}\n              {output}\n            </Form.Field>\n          </Card.Content>\n        </Card>\n      </Form>\n    </Grid.Column>\n  );\n}\n","// This component will simply add utility functions to your developer console.\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  let util = require(\"@polkadot/util\");\n  let util_crypto = require(\"@polkadot/util-crypto\");\n  let keyring = require(\"@polkadot/keyring\");\n\n  window.api = api;\n  window.util = util;\n  window.util_crypto = util_crypto;\n  window.keyring = keyring;\n\n  return null;\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Modal, Button, Card } from \"semantic-ui-react\";\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  const [metadata, setMetadata] = useState(0);\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    api.rpc.state.getMetadata(meta => {\n\t  setMetadata(meta);\n\t  setVersion(meta.version);\n    });\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n\t\t  <Card.Meta>\n            <span>v{version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Card, Icon, Grid } from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { api } = props;\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = () => {\n      Promise.all([\n        api.rpc.system.chain(),\n        api.rpc.system.name(),\n        api.rpc.system.version()\n      ])\n        .then(([chain, nodeName, nodeVersion]) => {\n          setNodeInfo({\n            chain,\n            nodeName,\n            nodeVersion\n          });\n        })\n        .catch(e => console.error(e));\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{\" \"}\n            <a href=\"https://github.com/substrate-developer-hub/substrate-front-end-template\">\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name=\"setting\" />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Feed, Grid } from \"semantic-ui-react\";\n\nexport default function Events(props) {\n  const { api } = props;\n\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        let eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        // loop through each of the parameters, displaying the type and data\n        let params = event.data.map((data, index) => {\n          return `${types[index].type}: ${data.toString()}`;\n        });\n\n        if (!filter.includes(eventName)) {\n          let feedEvent = {\n            icon: \"bell\",\n            date: \"X Blocks Ago\",\n            summary: eventName,\n            extraText: event.meta.documentation.join().toString(),\n            content: params.join(', ')\n          };\n\n          setEventFeed(e => [feedEvent, ...e]);\n        }\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: \"auto\", maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { web3FromSource } from \"@polkadot/extension-dapp\";\n\nexport default function TxButton({\n  api,\n  accountPair,\n  label,\n  params,\n  setStatus,\n  tx,\n  disabled,\n}) {\n  const makeCall = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    //set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus(\"Sending...\");\n\n    let transaction = tx(...params);\n\n    transaction\n      .signAndSend(fromParam, ({ status }) => {\n        if (status.isFinalized) {\n          let blockHash = `${status.asFinalized.toString()}`;\n          blockHash = blockHash.substr(0, 6) + \"....\" + blockHash.substr(60, 64);\n          setStatus(\n            `Sent! ${blockHash}`\n          );\n        } else {\n          setStatus(`Sending: ${status.type}`);\n        }\n      })\n      .catch(e => {\n        setStatus(\":( transaction failed\");\n        console.error(\"ERROR:\", e);\n      });\n  };\n\n  return (\n    <Button onClick={makeCall} primary type=\"submit\" disabled={!accountPair || disabled}>\n      {label}\n    </Button>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Card, Grid, Form, Input } from \"semantic-ui-react\";\n\nimport { blake2AsU8a } from '@polkadot/util-crypto';\nimport { createType } from '@polkadot/types';\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair } = props;\n\n  const [status, setStatus] = useState(\"\");\n\n  const defaultTransaction = createType('Transaction', {\n    receiver: createType('AccountId', accountPair.address),\n    token_id: createType('TokenId', 0),\n    prev_blk_num: createType('BlkNum', 0),\n    sender: createType('AccountId', accountPair.address),\n    signature: createType('Signature', \"\")\n  });\n  const [transaction, setTransaction] = useState(defaultTransaction);\n\n  const onChangeToken = token => {\n    setTransaction(prevTxn => {\n      let unsignedTxn = createType('UnsignedTransaction', {\n        receiver: createType('AccountId', accountPair.address),\n        token_id: createType('TokenId', token),\n        prev_blk_num: createType('BlkNum', prevTxn.prev_blk_num),\n      });\n      let signature = accountPair.sign(blake2AsU8a(unsignedTxn.toU8a()));\n      return createType('Transaction', {\n          ...unsignedTxn,\n          sender: createType('AccountId', accountPair.address),\n          signature: createType('Signature', signature)\n      })\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <Form>\n        <Card>\n          <Card.Content>\n            <Card.Header>Deposit Token</Card.Header>\n            <Card.Description>\n              <Form.Field>\n                <Input\n                  onChange={(_, data) => { onChangeToken(data.value) }}\n                  label=\"Token ID\"\n                  fluid\n                  placeholder=\"ID of Token you control\"\n                  type=\"text\"\n                />\n              </Form.Field>\n            </Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <Form.Field>\n              <TxButton\n                api={api}\n                accountPair={accountPair}\n                label={\"Add\"}\n                params={[transaction]}\n                setStatus={setStatus}\n                tx={api.tx.plasmaCash.deposit}\n              />\n              {status}\n            </Form.Field>\n          </Card.Content>\n        </Card>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Card, Grid, Form, Dropdown, Input } from \"semantic-ui-react\";\n\nimport { blake2AsU8a } from '@polkadot/util-crypto';\nimport { createType } from '@polkadot/types';\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair, keyring } = props;\n\n  const [status, setStatus] = useState(\"\");\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: \"user\"\n  }));\n\n  const defaultTransaction = createType('Transaction', {\n    receiver: createType('AccountId', accountPair.address),\n    token_id: createType('TokenId', 0),\n    prev_blk_num: createType('BlkNum', 0),\n    sender: createType('AccountId', accountPair.address),\n    signature: createType('Signature', \"\")\n  });\n  const [transaction, setTransaction] = useState(defaultTransaction);\n\n  const onChangeToken = token => {\n    setTransaction(prevTxn => {\n      let unsignedTxn = createType('UnsignedTransaction', {\n        receiver: createType('AccountId', prevTxn.receiver),\n        token_id: createType('TokenId', token),\n        prev_blk_num: createType('BlkNum', prevTxn.prev_blk_num),\n      });\n      let signature = accountPair.sign(blake2AsU8a(unsignedTxn.toU8a()));\n      return createType('Transaction', {\n          ...unsignedTxn,\n          sender: createType('AccountId', accountPair.address),\n          signature: createType('Signature', signature)\n      })\n    });\n  };\n\n  const onChangeReceiver = address => {\n    setTransaction(prevTxn => {\n      let unsignedTxn = createType('UnsignedTransaction', {\n        receiver: createType('AccountId', address),\n        token_id: createType('TokenId', prevTxn.token_id),\n        prev_blk_num: createType('BlkNum', prevTxn.prev_blk_num),\n      });\n      let signature = accountPair.sign(blake2AsU8a(unsignedTxn.toU8a()));\n      return createType('Transaction', {\n          ...unsignedTxn,\n          sender: createType('AccountId', accountPair.address),\n          signature: createType('Signature', signature)\n      })\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <Form>\n        <Card>\n          <Card.Content>\n            <Card.Header>Transfer Token</Card.Header>\n            <Card.Description>\n              <Form.Field>\n                <Input\n                  onChange={(_, data) => { onChangeToken(data.value) }}\n                  label=\"Token ID\"\n                  fluid\n                  placeholder=\"ID of Token you control\"\n                  state={transaction.tokenId}\n                  type=\"text\"\n                />\n              </Form.Field>\n              <Form.Field>\n                <Dropdown\n                  search\n                  selection\n                  clearable\n                  placeholder=\"Select Receipient\"\n                  options={keyringOptions}\n                  onChange={(_, dropdown) => {\n                    onChangeReceiver(dropdown.value);\n                  }}\n                  value={transaction.receiverId}\n                />\n              </Form.Field>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n            <Form.Field>\n              <TxButton\n                api={api}\n                accountPair={accountPair}\n                label={\"Send\"}\n                params={[transaction]}\n                setStatus={setStatus}\n                tx={api.tx.plasmaCash.transfer}\n              />\n              {status}\n            </Form.Field>\n          </Card.Content>\n        </Card>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Card, Grid, Form, Input } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair } = props;\n\n  const [status, setStatus] = useState(\"\");\n\n  const initialState = {\n    tokenId: \"\"\n  };\n\n  const [formState, setFormState] = useState(initialState);\n  const { tokenId } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <Form>\n        <Card>\n          <Card.Content>\n            <Card.Header>Withdraw Token</Card.Header>\n            <Card.Description>\n              <Form.Field>\n                <Input\n                  onChange={onChange}\n                  label=\"Token ID\"\n                  fluid\n                  placeholder=\"ID of Token you control\"\n                  state=\"tokenId\"\n                  type=\"text\"\n                />\n              </Form.Field>\n            </Card.Description>\n          </Card.Content>\n          <Card.Content extra>\n            <Form.Field>\n              <TxButton\n                api={api}\n                accountPair={accountPair}\n                label={\"Remove\"}\n                params={[tokenId]}\n                setStatus={setStatus}\n                tx={api.tx.plasmaCash.withdraw}\n              />\n              {status}\n            </Form.Field>\n          </Card.Content>\n        </Card>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport { web3Accounts, web3Enable } from \"@polkadot/extension-dapp\";\nimport keyring from \"@polkadot/ui-keyring\";\nimport React, { useState, useEffect, createRef } from \"react\";\nimport { Container, Dimmer, Loader, Grid, Sticky } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport AccountSelector from \"./AccountSelector\";\nimport BlockNumber from \"./BlockNumber\";\nimport TokenQuery from \"./TokenQuery\";\nimport DeveloperConsole from \"./DeveloperConsole\";\nimport Metadata from \"./Metadata\";\nimport NodeInfo from \"./NodeInfo\";\n\nimport Events from \"./Events\";\nimport Deposit from \"./Deposit\";\nimport Transfer from \"./Transfer\";\nimport Withdraw from \"./Withdraw\";\n\nexport default function App() {\n  const [api, setApi] = useState();\n  const [apiReady, setApiReady] = useState();\n  const [accountLoaded, setAccountLoaded] = useState(false);\n  const [accountAddress, setAccountAddress] = useState(\"\");\n\n  const WS_PROVIDER = \"ws://127.0.0.1:9944\";\n\n  const accountPair = accountAddress && keyring.getPair(accountAddress);\n\n  useEffect(() => {\n    const provider = new WsProvider(WS_PROVIDER);\n\n    const TYPES = {\n        \"TokenId\": \"u256\",\n        \"BlkNum\" : \"u256\",\n        \"UnsignedTransaction\": {\n            \"receiver\" : \"AccountId\",\n            \"token_id\": \"TokenId\",\n            \"prev_blk_num\" : \"BlkNum\",\n        },\n        \"Transaction\": {\n            \"receiver\" : \"AccountId\",\n            \"token_id\": \"TokenId\",\n            \"prev_blk_num\" : \"BlkNum\",\n            \"sender\" : \"AccountId\",\n            \"signature\" : \"Signature\"\n        }\n    };\n\n    ApiPromise.create({\n      provider,\n      types: TYPES\n    })\n      .then(api => {\n        setApi(api);\n        api.isReady.then(() => setApiReady(true));\n      })\n      .catch(e => console.error(e));\n  }, []);\n\n  // new hook to get injected accounts\n  useEffect(() => {\n    web3Enable(\"plasma-cash\")\n      .then(extensions => {\n        // web3Account promise resolves with an array of injected accounts\n        // or an empty array (e.g user has no extension, or not given access to their accounts)\n        web3Accounts()\n          .then(accounts => {\n            // add the source to the name to avoid confusion\n            return accounts.map(({ address, meta }) => ({\n              address,\n              meta: {\n                ...meta,\n                name: `${meta.name} (${meta.source})`\n              }\n            }));\n          })\n          // load our keyring with the newly injected accounts\n          .then(injectedAccounts => {\n            loadAccounts(injectedAccounts);\n          })\n          .catch(console.error);\n      })\n      .catch(console.error);\n  }, []);\n\n  const loadAccounts = injectedAccounts => {\n    keyring.loadAll(\n      {\n        isDevelopment: true\n      },\n      injectedAccounts\n    );\n    setAccountLoaded(true);\n  };\n\n  const loader = function(text) {\n    return (\n      <Dimmer active>\n        <Loader size=\"small\">{text}</Loader>\n      </Dimmer>\n    );\n  };\n\n  if (!apiReady) {\n    return loader(\"Connecting to the blockchain\");\n  }\n\n  if (!accountLoaded) {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  let accounts = keyring\n                    .getPairs()\n                    .map(account => ({\n                        address: account.address,\n                        name: account.meta.name.toUpperCase(),\n                    }));\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector\n          keyring={keyring}\n          setAccountAddress={setAccountAddress}\n          api={api}\n        />\n      </Sticky>\n      <Container>\n        <Grid divided>\n          <Grid.Row columns={4} stretched>\n            <NodeInfo api={api} />\n            <Metadata api={api} />\n            <BlockNumber api={api} />\n            <BlockNumber api={api} finalized />\n          </Grid.Row>\n          <Grid.Row columns={4} stretched>\n            <TokenQuery accounts={accounts} api={api} />\n            <Transfer api={api} accountPair={accountPair} keyring={keyring} />\n            <Deposit api={api} accountPair={accountPair} />\n            <Withdraw api={api} accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Events api={api} />\n          </Grid.Row>\n        </Grid>\n        {/* These components don't render elements. */}\n        <DeveloperConsole api={api} />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}