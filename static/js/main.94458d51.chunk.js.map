{"version":3,"sources":["AccountSelector.jsx","BlockNumber.jsx","TokenQuery.jsx","DeveloperConsole.jsx","Metadata.jsx","NodeInfo.jsx","Events.jsx","TxButton.jsx","Deposit.jsx","Transfer.jsx","Withdraw.jsx","index.jsx","App.jsx"],"names":["NodeInfo","props","keyring","setAccountAddress","api","useState","accountSelected","setAccountSelected","keyringOptions","getPairs","map","account","key","address","value","text","meta","name","toUpperCase","icon","initialAddress","length","useEffect","query","balances","Menu","attached","tabular","style","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","Icon","circular","color","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","extRoot","setExtRoot","stateRoot","setStateRoot","bestNumber","derive","chain","bestNumberFinalized","getHeader","rpc","unsubscribeAll","number","toNumber","header","extrinsicsRoot","toHex","substring","then","unsub","catch","console","error","timer","time","id","setInterval","clearInterval","Grid","Column","Card","Content","textAlign","Statistic","label","extra","Row","TokenQuery","output","setOutput","tokenId","formState","setFormState","runQuery","a","plasmaCash","tokens","result","isNone","toString","Form","Field","Input","data","state","fluid","type","Button","onClick","primary","Metadata","util","require","util_crypto","window","metadata","setMetadata","version","setVersion","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","nodeInfo","setNodeInfo","Promise","all","system","nodeName","nodeVersion","e","href","Events","eventFeed","setEventFeed","filter","events","forEach","record","event","phase","types","typeDef","eventName","section","method","params","index","includes","feedEvent","date","summary","extraText","documentation","join","content","Feed","overflow","maxHeight","TxButton","accountPair","setStatus","tx","disabled","sudo","makeCall","source","isInjected","web3FromSource","injected","fromParam","setSigner","signer","signAndSend","status","isFinalized","asFinalized","Extrinsics","deposit","receiver","setReceiver","receiverId","setReceiverId","transfer","withdraw","ReactDOM","render","setApi","apiReady","setApiReady","accountLoaded","setAccountLoaded","accountAddress","getPair","provider","WsProvider","ApiPromise","create","isReady","web3Enable","extensions","web3Accounts","accounts","injectedAccounts","loadAccounts","loadAll","isDevelopment","loader","Dimmer","active","Loader","contextRef","createRef","ref","Sticky","context","divided","columns","stretched","document","getElementById"],"mappings":"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","file":"static/js/main.94458d51.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {\n  Menu,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n} from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { keyring, setAccountAddress, api } = props;\n  const [accountSelected, setAccountSelected] = useState(\"\");\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: \"user\"\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : \"\";\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  // When account address changes, update subscriptions\n  useEffect(() => {\n    let unsubscribe;\n\n    return () => unsubscribe && unsubscribe();\n  }, [accountSelected, api.query.balances]);\n\n  return (\n    <Menu\n      attached=\"top\"\n      tabular\n      style={{\n        backgroundColor: \"#fff\",\n        borderColor: \"#fff\",\n        paddingTop: \"1em\",\n        paddingBottom: \"1em\"\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src=\"Substrate-Logo.png\" size=\"mini\" />\n        </Menu.Menu>\n        <Menu.Menu position=\"right\">\n          <Icon\n            name=\"users\"\n            size=\"large\"\n            circular\n            color={accountSelected ? \"green\" : \"red\"}\n          ></Icon>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder=\"Select an account\"\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChange(dropdown.value);\n            }}\n            value={accountSelected}\n          />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Statistic, Grid, Card, Icon } from \"semantic-ui-react\";\n\nexport default function BlockNumber(props) {\n  const { api, finalized } = props;\n\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const [extRoot, setExtRoot] = useState(0);\n  const [stateRoot, setStateRoot] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  const getHeader = api.rpc.chain.getHeader;\n\n  useEffect(() => {\n    let unsubscribeAll;\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n        // Populate State and Ext roots\n        getHeader(header => {\n            let extRoot = header.extrinsicsRoot.toHex();\n            setExtRoot(extRoot.substring(0, 6) + \"....\"\n                       + extRoot.substring(62, 66));\n            let stateRoot = header.stateRoot.toHex();\n            setStateRoot(stateRoot.substring(0, 6) + \"....\"\n                         + stateRoot.substring(62, 66));\n        });\n    })\n    .then(unsub => {\n      unsubscribeAll = unsub;\n    })\n    .catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber, getHeader]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <>\n      <Grid.Column>\n        <Card>\n          <Card.Content textAlign=\"center\">\n            <Statistic\n              label={(finalized ? \"Finalized\" : \"Current\") + \" Block Number\"}\n              value={blockNumber}\n            />\n          </Card.Content>\n          <Card.Content extra>\n            <Grid.Column>\n              <Grid.Row>\n                <Icon name=\"envelope\" /> {extRoot}\n              </Grid.Row>\n              <Grid.Row>\n                <Icon name=\"save\" /> {stateRoot}\n              </Grid.Row>\n              <Grid.Row>\n                <Icon name=\"time\" /> {blockNumberTimer}\n              </Grid.Row>\n            </Grid.Column>\n          </Card.Content>\n        </Card>\n      </Grid.Column>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Grid, Form, Button, Input } from \"semantic-ui-react\";\n\nexport default function TokenQuery(props) {\n  const { api } = props;\n\n  const [output, setOutput] = useState(\"\");\n\n  const initialState = {\n    tokenId: \"\"\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { tokenId } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  const runQuery = async () => {\n    try {\n      let result = await api.query.plasmaCash.tokens(tokenId);\n      setOutput(result.isNone ? \"No one owns it!\" : result.toString());\n    } catch (e) {\n\t\tsetOutput(e.toString())\n\t}\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Token Ownership</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Token ID\"\n            fluid\n            placeholder=\"ID of Token\"\n            state=\"tokenId\"\n            type=\"text\"\n            value={tokenId}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Button onClick={runQuery} primary type=\"submit\">\n            Query\n          </Button>{\" Owner: \"}\n          {output}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","// This component will simply add utility functions to your developer console.\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  let util = require(\"@polkadot/util\");\n  let util_crypto = require(\"@polkadot/util-crypto\");\n  let keyring = require(\"@polkadot/keyring\");\n\n  window.api = api;\n  window.util = util;\n  window.util_crypto = util_crypto;\n  window.keyring = keyring;\n\n  return null;\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Grid, Modal, Button, Card } from \"semantic-ui-react\";\n\nexport default function Metadata(props) {\n  const { api } = props;\n\n  const [metadata, setMetadata] = useState(0);\n  const [version, setVersion] = useState(0);\n  useEffect(() => {\n    api.rpc.state.getMetadata(meta => {\n\t  setMetadata(meta);\n\t  setVersion(meta.version);\n    });\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n\t\t  <Card.Meta>\n            <span>v{version}</span>\n          </Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre>\n                  <code>{JSON.stringify(metadata, null, 2)}</code>\n                </pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Card, Icon, Grid } from \"semantic-ui-react\";\n\nexport default function NodeInfo(props) {\n  const { api } = props;\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = () => {\n      Promise.all([\n        api.rpc.system.chain(),\n        api.rpc.system.name(),\n        api.rpc.system.version()\n      ])\n        .then(([chain, nodeName, nodeVersion]) => {\n          setNodeInfo({\n            chain,\n            nodeName,\n            nodeVersion\n          });\n        })\n        .catch(e => console.error(e));\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{\" \"}\n            <a href=\"https://github.com/substrate-developer-hub/substrate-front-end-template\">\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name=\"setting\" />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport { Feed, Grid } from \"semantic-ui-react\";\n\nexport default function Events(props) {\n  const { api } = props;\n\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        let eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        // loop through each of the parameters, displaying the type and data\n        let params = event.data.map((data, index) => {\n          return `${types[index].type}: ${data.toString()}`;\n        });\n\n        if (!filter.includes(eventName)) {\n          let feedEvent = {\n            icon: \"bell\",\n            date: \"X Blocks Ago\",\n            summary: eventName,\n            extraText: event.meta.documentation.join().toString(),\n            content: params\n          };\n\n          setEventFeed(e => [feedEvent, ...e]);\n        }\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: \"auto\", maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { web3FromSource } from \"@polkadot/extension-dapp\";\n\nexport default function TxButton({\n  api,\n  accountPair,\n  label,\n  params,\n  setStatus,\n  tx,\n  disabled,\n  sudo = false\n}) {\n  const makeCall = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    //set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus(\"Sending...\");\n\n    // Check if this transaction needs sudo\n    let transaction;\n    if (sudo) {\n      transaction = tx.sudo(...params);\n    } else {\n      transaction = tx(...params);\n    }\n\n    transaction\n      .signAndSend(fromParam, ({ status }) => {\n        if (status.isFinalized) {\n          setStatus(\n            `Completed at block hash #${status.asFinalized.toString()}`\n          );\n        } else {\n          setStatus(`Current transaction status: ${status.type}`);\n        }\n      })\n      .catch(e => {\n        setStatus(\":( transaction failed\");\n        console.error(\"ERROR:\", e);\n      });\n  };\n\n  return (\n    <Button onClick={makeCall} primary type=\"submit\" disabled={!accountPair || disabled}>\n      {label}\n    </Button>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Grid, Form, Input } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair } = props;\n\n  const [status, setStatus] = useState(\"\");\n\n  const initialState = {\n    tokenId: \"\"\n  };\n\n  const [formState, setFormState] = useState(initialState);\n  const { tokenId } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Deposit Token</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Token ID\"\n            fluid\n            placeholder=\"ID of Token you control\"\n            state=\"tokenId\"\n            type=\"text\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Add\"}\n            params={[tokenId]}\n            setStatus={setStatus}\n            tx={api.tx.plasmaCash.deposit}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Grid, Form, Dropdown, Input } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair, keyring } = props;\n\n  const [status, setStatus] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [receiverId, setReceiverId] = useState(\"\");\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: \"user\"\n  }));\n\n  const initialState = {\n    tokenId: \"\",\n  };\n\n  const [formState, setFormState] = useState(initialState);\n  const { tokenId } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  const onChangeReceiver = address => {\n    setReceiver(address);\n    setReceiverId(address.toString());\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Transfer Token</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Token ID\"\n            fluid\n            placeholder=\"ID of Token you control\"\n            state=\"tokenId\"\n            type=\"text\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder=\"Select Receipient\"\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChangeReceiver(dropdown.value);\n            }}\n            value={receiver}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Send\"}\n            params={[tokenId, receiverId]}\n            setStatus={setStatus}\n            tx={api.tx.plasmaCash.transfer}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { Grid, Form, Input } from \"semantic-ui-react\";\n\nimport TxButton from \"./TxButton\";\n\nexport default function Extrinsics(props) {\n  const { api, accountPair } = props;\n\n  const [status, setStatus] = useState(\"\");\n\n  const initialState = {\n    tokenId: \"\"\n  };\n\n  const [formState, setFormState] = useState(initialState);\n  const { tokenId } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Withdraw Token</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label=\"Token ID\"\n            fluid\n            placeholder=\"ID of Token you control\"\n            state=\"tokenId\"\n            type=\"text\"\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            api={api}\n            accountPair={accountPair}\n            label={\"Remove\"}\n            params={[tokenId]}\n            setStatus={setStatus}\n            tx={api.tx.plasmaCash.withdraw}\n          />\n          {status}\n        </Form.Field>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import { ApiPromise, WsProvider } from \"@polkadot/api\";\nimport { web3Accounts, web3Enable } from \"@polkadot/extension-dapp\";\nimport keyring from \"@polkadot/ui-keyring\";\nimport React, { useState, useEffect, createRef } from \"react\";\nimport { Container, Dimmer, Loader, Grid, Sticky } from \"semantic-ui-react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport AccountSelector from \"./AccountSelector\";\nimport BlockNumber from \"./BlockNumber\";\nimport TokenQuery from \"./TokenQuery\";\nimport DeveloperConsole from \"./DeveloperConsole\";\nimport Metadata from \"./Metadata\";\nimport NodeInfo from \"./NodeInfo\";\n\nimport Events from \"./Events\";\nimport Deposit from \"./Deposit\";\nimport Transfer from \"./Transfer\";\nimport Withdraw from \"./Withdraw\";\n\nexport default function App() {\n  const [api, setApi] = useState();\n  const [apiReady, setApiReady] = useState();\n  const [accountLoaded, setAccountLoaded] = useState(false);\n  const [accountAddress, setAccountAddress] = useState(\"\");\n\n  const WS_PROVIDER = \"ws://127.0.0.1:9944\";\n\n  const accountPair = accountAddress && keyring.getPair(accountAddress);\n\n  useEffect(() => {\n    const provider = new WsProvider(WS_PROVIDER);\n\n    const TYPES = {\"TokenId\": \"u256\"};\n\n    ApiPromise.create({\n      provider,\n      types: TYPES\n    })\n      .then(api => {\n        setApi(api);\n        api.isReady.then(() => setApiReady(true));\n      })\n      .catch(e => console.error(e));\n  }, []);\n\n  // new hook to get injected accounts\n  useEffect(() => {\n    web3Enable(\"plasma-cash\")\n      .then(extensions => {\n        // web3Account promise resolves with an array of injected accounts\n        // or an empty array (e.g user has no extension, or not given access to their accounts)\n        web3Accounts()\n          .then(accounts => {\n            // add the source to the name to avoid confusion\n            return accounts.map(({ address, meta }) => ({\n              address,\n              meta: {\n                ...meta,\n                name: `${meta.name} (${meta.source})`\n              }\n            }));\n          })\n          // load our keyring with the newly injected accounts\n          .then(injectedAccounts => {\n            loadAccounts(injectedAccounts);\n          })\n          .catch(console.error);\n      })\n      .catch(console.error);\n  }, []);\n\n  const loadAccounts = injectedAccounts => {\n    keyring.loadAll(\n      {\n        isDevelopment: true\n      },\n      injectedAccounts\n    );\n    setAccountLoaded(true);\n  };\n\n  const loader = function(text) {\n    return (\n      <Dimmer active>\n        <Loader size=\"small\">{text}</Loader>\n      </Dimmer>\n    );\n  };\n\n  if (!apiReady) {\n    return loader(\"Connecting to the blockchain\");\n  }\n\n  if (!accountLoaded) {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector\n          keyring={keyring}\n          setAccountAddress={setAccountAddress}\n          api={api}\n        />\n      </Sticky>\n      <Container>\n        <Grid divided>\n          <Grid.Row columns={4} stretched>\n            <NodeInfo api={api} />\n            <Metadata api={api} />\n            <BlockNumber api={api} />\n            <BlockNumber api={api} finalized />\n          </Grid.Row>\n          <Grid.Row columns={3} stretched>\n            <Grid.Column>\n              <Transfer api={api} accountPair={accountPair} keyring={keyring} />\n            </Grid.Column>\n            <Grid.Column>\n              <Deposit api={api} accountPair={accountPair} />\n            </Grid.Column>\n            <Grid.Column>\n              <Withdraw api={api} accountPair={accountPair} />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={3} stretched>\n            <Grid.Column>\n              <TokenQuery api={api} />\n            </Grid.Column>\n            <Grid.Column>\n              <Events api={api} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        {/* These components don't render elements. */}\n        <DeveloperConsole api={api} />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}