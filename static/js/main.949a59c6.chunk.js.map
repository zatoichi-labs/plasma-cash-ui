{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/useSubstrate.js","substrate-lib/components/DeveloperConsole.js","substrate-lib/components/TxButton.js","Metadata.js","NodeInfo.js","AccountSelector.js","BlockNumber.js","TokenQuery.js","Events.js","Deposit.js","Transfer.js","Withdraw.js","App.js","index.js"],"names":["config","require","reduce","mem","n","undefined","process","slice","INIT_STATE","socket","PROVIDER_SOCKET","types","CUSTOM_TYPES","keyring","keyringState","api","apiState","reducer","state","action","type","payload","Error","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","Provider","value","children","useSubstrate","useContext","connect","useCallback","a","provider","WsProvider","ApiPromise","create","_api","isReady","console","error","loadAccounts","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","useEffect","DeveloperConsole","window","util","util_crypto","TxButton","accountPair","label","setStatus","style","attrs","disabled","params","tx","isQuery","transaction","isInjected","web3FromSource","injected","fromParam","setSigner","signer","txExecute","e","toString","signAndSend","status","isFinalized","blockHash","asFinalized","substr","catch","query","result","Button","primary","onClick","Metadata","useState","data","version","metadata","setMetadata","rpc","getMetadata","Grid","Column","Card","Content","Header","Meta","extra","Modal","trigger","scrolling","Description","JSON","stringify","NodeInfo","nodeInfo","setNodeInfo","Promise","all","system","chain","nodeName","nodeVersion","getInfo","href","Icon","AccountSelector","setAccountAddress","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","length","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","circular","color","Dropdown","search","selection","clearable","placeholder","options","onChange","_","dropdown","BlockNumber","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","extRoot","setExtRoot","stateRoot","setStateRoot","bestNumber","derive","bestNumberFinalized","getHeader","unsubscribeAll","number","toNumber","header","extrinsicsRoot","toHex","substring","then","unsub","timer","time","id","setInterval","clearInterval","textAlign","Statistic","Row","TokenQuery","accounts","tokenId","formState","setFormState","Form","Field","Input","fluid","obj","parse","receiver","filter","plasmaCash","tokens","overflowWrap","Events","eventFeed","setEventFeed","events","record","event","phase","typeDef","eventName","section","method","includes","index","date","summary","extraText","documentation","join","content","Feed","overflow","maxHeight","Deposit","defaultTransaction","createType","token_id","prev_blk_num","sender","signature","setTransaction","onChangeToken","token","prevTxn","unsignedTxn","sign","blake2AsU8a","toU8a","deposit","Transfer","transfer","Withdraw","withdraw","Main","accountAddress","getPair","loader","Dimmer","active","Loader","contextRef","createRef","ref","Sticky","context","divided","columns","stretched","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.949a59c6.chunk.js","sourcesContent":["import configCommon from './common.json';\n// Using `require` as `import` does not support dynamic loading (yet).\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\n\n// Accepting React env vars and aggregating them into `config` object.\nconst envVarNames = [\n  'REACT_APP_PROVIDER_SOCKET',\n  'REACT_APP_DEVELOPMENT_KEYRING'\n];\nconst envVars = envVarNames.reduce((mem, n) => {\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\n  return mem;\n}, {});\n\nconst config = { ...configCommon, ...configEnv, ...envVars };\nexport default config;\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport config from '../config';\n\nconst INIT_STATE = {\n  socket: config.PROVIDER_SOCKET,\n  types: config.CUSTOM_TYPES,\n  keyring: null,\n  keyringState: null,\n  api: null,\n  apiState: null\n};\n\nconst reducer = (state, action) => {\n  let socket = null;\n\n  switch (action.type) {\n    case 'RESET_SOCKET':\n      socket = action.payload || state.socket;\n      return { ...state, socket, api: null, apiState: null };\n\n    case 'CONNECT':\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\n\n    case 'CONNECT_SUCCESS':\n      return { ...state, apiState: 'READY' };\n\n    case 'CONNECT_ERROR':\n      return { ...state, apiState: 'ERROR' };\n\n    case 'SET_KEYRING':\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\n\n    case 'KEYRING_ERROR':\n      return { ...state, keyring: null, keyringState: 'ERROR' };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n};\n\nconst SubstrateContext = React.createContext();\n\nconst SubstrateContextProvider = (props) => {\n  // filtering props and merge with default param value\n  const initState = { ...INIT_STATE };\n  const neededPropNames = ['socket', 'types'];\n  neededPropNames.forEach(key => {\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\n  });\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  return (\n    <SubstrateContext.Provider value={[state, dispatch]}>\n      {props.children}\n    </SubstrateContext.Provider>\n  );\n};\n\n// prop typechecking\nSubstrateContextProvider.propTypes = {\n  socket: PropTypes.string,\n  types: PropTypes.object\n};\n\nexport { SubstrateContext, SubstrateContextProvider };\n","import { useContext, useEffect, useCallback } from 'react';\nimport { ApiPromise, WsProvider } from '@polkadot/api';\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport keyring from '@polkadot/ui-keyring';\n\nimport config from '../config';\nimport { SubstrateContext } from './SubstrateContext';\n\nconst useSubstrate = () => {\n  const [state, dispatch] = useContext(SubstrateContext);\n\n  // `useCallback` so that returning memoized function and not created\n  //   everytime, and thus re-render.\n  const { api, socket, types } = state;\n  const connect = useCallback(async () => {\n    if (api) return;\n\n    const provider = new WsProvider(socket);\n\n    try {\n      const _api = await ApiPromise.create({ provider, types });\n      dispatch({ type: 'CONNECT', payload: _api });\n      await _api.isReady;\n      dispatch({ type: 'CONNECT_SUCCESS' });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'CONNECT_ERROR' });\n    }\n  }, [api, socket, types, dispatch]);\n\n  // hook to get injected accounts\n  const { keyringState } = state;\n  const loadAccounts = useCallback(async () => {\n    // Ensure the method only run once.\n    if (keyringState) return;\n\n    try {\n      await web3Enable(config.APP_NAME);\n      let allAccounts = await web3Accounts();\n      allAccounts = allAccounts.map(({ address, meta }) =>\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\n\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\n    } catch (e) {\n      console.error(e);\n      dispatch({ type: 'KEYRING_ERROR' });\n    }\n  }, [keyringState, dispatch]);\n\n  useEffect(() => {\n    connect();\n  }, [connect]);\n\n  useEffect(() => {\n    loadAccounts();\n  }, [loadAccounts]);\n\n  return { ...state, dispatch };\n};\n\nexport default useSubstrate;\n","// This component will simply add utility functions to your developer console.\nimport { useSubstrate } from '../';\n\nexport default function DeveloperConsole (props) {\n  const { api } = useSubstrate();\n  window.api = api;\n  window.util = require('@polkadot/util');\n  window.util_crypto = require('@polkadot/util-crypto');\n  window.keyring = require('@polkadot/keyring');\n\n  return null;\n}\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\n\nexport default function TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  style = null,\n  type = null,\n  attrs = null,\n  disabled = false\n}) {\n  const { api } = useSubstrate();\n  const { params = null, tx = null } = attrs;\n  const isQuery = () => type === 'QUERY';\n\n  const transaction = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromParam;\n\n    // set the signer\n    if (isInjected) {\n      const injected = await web3FromSource(source);\n      fromParam = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromParam = accountPair;\n    }\n    setStatus('Sending...');\n\n    let txExecute;\n    try {\n      // Check if tx has params\n      if (!params) {\n        txExecute = tx();\n      } else {\n        txExecute = tx(...params);\n      }\n    } catch (e) {\n      console.error('ERROR forming transaction:', e);\n      setStatus(e.toString());\n    }\n\n    if (txExecute) {\n      txExecute\n        .signAndSend(fromParam, ({ status }) => {\n          if (status.isFinalized) {\n            let blockHash = `${status.asFinalized.toString()}`;\n            blockHash = blockHash.substr(0, 6) + \"....\" + blockHash.substr(60, 64);\n            setStatus(`Completed at block hash ${blockHash}`)\n          } else {\n            setStatus(`Current transaction status: ${status.type}`);\n          }\n        })\n        .catch(e => {\n          setStatus(':( transaction failed');\n          console.error('ERROR transaction:', e);\n        });\n    }\n  };\n\n  const query = async () => {\n    try {\n      const result = await tx(...params);\n      setStatus(result.toString());\n    } catch (e) {\n      console.error('ERROR query:', e);\n      setStatus(e.toString());\n    }\n  };\n\n  return (\n    <Button\n      primary\n      style={style}\n      type='submit'\n      onClick={isQuery() ? query : transaction}\n      disabled={disabled || !tx || (!isQuery() && !accountPair)}\n    >\n      {label}\n    </Button>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Metadata (props) {\n  const { api } = useSubstrate();\n  const [metadata, setMetadata] = useState({ data: null, version: null });\n\n  useEffect(() => {\n    const getMetadata = async () => {\n      try {\n        const data = await api.rpc.state.getMetadata();\n        setMetadata({ data, version: data.version });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getMetadata();\n  }, [api.rpc.state]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>Metadata</Card.Header>\n          <Card.Meta><span>v{metadata.version}</span></Card.Meta>\n        </Card.Content>\n        <Card.Content extra>\n          <Modal trigger={<Button>Show Metadata</Button>}>\n            <Modal.Header>Runtime Metadata</Modal.Header>\n            <Modal.Content scrolling>\n              <Modal.Description>\n                <pre><code>{JSON.stringify(metadata.data, null, 2)}</code></pre>\n              </Modal.Description>\n            </Modal.Content>\n          </Modal>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Card, Icon, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function NodeInfo (props) {\n  const { api } = useSubstrate();\n  const [nodeInfo, setNodeInfo] = useState({});\n\n  useEffect(() => {\n    const getInfo = async () => {\n      try {\n        const [chain, nodeName, nodeVersion] = await Promise.all([\n          api.rpc.system.chain(),\n          api.rpc.system.name(),\n          api.rpc.system.version()\n        ]);\n        setNodeInfo({ chain, nodeName, nodeVersion });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    getInfo();\n  }, [api.rpc.system]);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content>\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\n          <Card.Meta>\n            <span>{nodeInfo.chain}</span>\n          </Card.Meta>\n          <Card.Description>\n            Built using the{' '}\n            <a href='https://github.com/substrate-developer-hub/substrate-front-end-template'>\n              Substrate Front End Template\n            </a>\n          </Card.Description>\n        </Card.Content>\n        <Card.Content extra>\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Menu,\n  Dropdown,\n  Container,\n  Icon,\n  Image,\n} from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function AccountSelector (props) {\n  const { keyring } = useSubstrate();\n  const { setAccountAddress } = props;\n  const [accountSelected, setAccountSelected] = useState('');\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const initialAddress =\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\n\n  // Set the initial address\n  useEffect(() => {\n    setAccountSelected(initialAddress);\n    setAccountAddress(initialAddress);\n  }, [setAccountAddress, initialAddress]);\n\n  const onChange = address => {\n    // Update state with new account address\n    setAccountAddress(address);\n    setAccountSelected(address);\n  };\n\n  return (\n    <Menu\n      attached='top'\n      tabular\n      style={{\n        backgroundColor: '#fff',\n        borderColor: '#fff',\n        paddingTop: '1em',\n        paddingBottom: '1em'\n      }}\n    >\n      <Container>\n        <Menu.Menu>\n          <Image src='Substrate-Logo.png' size='mini' />\n        </Menu.Menu>\n        <Menu.Menu position='right'>\n          <Icon\n            name='users'\n            size='large'\n            circular\n            color={accountSelected ? 'green' : 'red'}\n          />\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder='Select an account'\n            options={keyringOptions}\n            onChange={(_, dropdown) => { onChange(dropdown.value); }}\n            value={accountSelected}\n          />\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function BlockNumber (props) {\n  const { api } = useSubstrate();\n  const { finalized } = props;\n  const [blockNumber, setBlockNumber] = useState(0);\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\n\n  const [extRoot, setExtRoot] = useState(0);\n  const [stateRoot, setStateRoot] = useState(0);\n\n  const bestNumber = finalized\n    ? api.derive.chain.bestNumberFinalized\n    : api.derive.chain.bestNumber;\n\n  const getHeader = api.rpc.chain.getHeader;\n\n  useEffect(() => {\n    let unsubscribeAll = null;\n\n    bestNumber(number => {\n      setBlockNumber(number.toNumber());\n      setBlockNumberTimer(0);\n      getHeader(header => {\n        let extRoot = header.extrinsicsRoot.toHex();\n        setExtRoot(extRoot.substring(0, 6) + '....' + extRoot.substring(62, 66));\n        let stateRoot = header.stateRoot.toHex();\n        setStateRoot(stateRoot.substring(0, 6) + '....' + stateRoot.substring(62, 66));\n      });\n    }).then(unsub => {\n      unsubscribeAll = unsub;\n    }).catch(console.error);\n\n    return () => unsubscribeAll && unsubscribeAll();\n  }, [bestNumber, getHeader]);\n\n  const timer = () => {\n    setBlockNumberTimer(time => time + 1);\n  };\n\n  useEffect(() => {\n    const id = setInterval(timer, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return (\n    <Grid.Column>\n      <Card>\n        <Card.Content textAlign='center'>\n          <Statistic\n            label={(finalized ? 'Finalized' : 'Current') + ' Block Number'}\n            value={blockNumber}\n          />\n        </Card.Content>\n        <Card.Content extra>\n          <Grid.Column>\n            <Grid.Row>\n              <Icon name='envelope' /> {extRoot}\n            </Grid.Row>\n            <Grid.Row>\n              <Icon name='save' /> {stateRoot}\n            </Grid.Row>\n            <Grid.Row>\n              <Icon name='time' /> {blockNumberTimer}\n            </Grid.Row>\n          </Grid.Column>\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Grid, Form, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function TokenQuery (props) {\n  const { api, keyring } = useSubstrate();\n  const [status, setStatus] = useState(null);\n\n  // Get the list of accounts we possess the private key for\n  const accounts = keyring.getPairs().map(account => ({\n    address: account.address,\n    name: account.meta.name.toUpperCase(),\n  }));\n\n  const initialState = {\n    tokenId: '',\n  };\n  const [formState, setFormState] = useState(initialState);\n  const { tokenId } = formState;\n\n  const onChange = (_, data) => {\n    setFormState(formState => {\n      return {\n        ...formState,\n        [data.state]: data.value\n      };\n    });\n  };\n\n  const setQueryStatus = status => {\n    try {\n      let obj = JSON.parse(status);\n      if (obj.receiver) {\n        let receiver = accounts.filter(account => account.address === obj.receiver);\n        // If one and only one account is found with the matching address in our\n        // address book, display their name\n        if (receiver.length === 1) {\n          setStatus(\"Owner: \" + receiver[0].name);\n        } else {\n          // else, display the address we've received\n          setStatus(\"Owner: \" + obj.receiver);\n        }\n      }\n    } catch {\n      setStatus(\"Owner: Unknown!\");\n    }\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Token Ownership</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label='Token ID'\n            fluid\n            placeholder='ID of Token'\n            state='tokenId'\n            type='text'\n            value={tokenId}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            label='Query'\n            setStatus={setQueryStatus}\n            type='QUERY'\n            attrs={{\n              params: [tokenId],\n              tx: api.query.plasmaCash.tokens\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Feed, Grid } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    // Filter some event from feed\n    const filter = [\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\n      'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\n    ];\n\n    api.query.system.events(events => {\n      // loop through the Vec<EventRecord>\n      events.forEach(record => {\n        // extract the phase, event and the event types\n        const { event, phase } = record;\n        const types = event.typeDef;\n\n        // show what we are busy with\n        const eventName = `${event.section}:${\n          event.method\n        }:: (phase=${phase.toString()})`;\n\n        if (filter.includes(eventName)) return;\n\n        // loop through each of the parameters, displaying the type and data\n        const params = event.data.map((data, index) =>\n          `${types[index].type}: ${data.toString()}`\n        );\n\n        setEventFeed(e => [{\n          icon: 'bell',\n          date: 'X Blocks Ago',\n          summary: `${eventName}-${e.length}`,\n          extraText: event.meta.documentation.join(', ').toString(),\n          content: params.join(', ')\n        }, ...e]);\n      });\n    });\n  }, [api.query.system]);\n\n  return (\n    <Grid.Column>\n      <h1>Events</h1>\n      <Feed style={{ overflow: 'auto', maxHeight: 250 }} events={eventFeed} />\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Grid, Form, Input } from 'semantic-ui-react';\n\nimport { blake2AsU8a } from '@polkadot/util-crypto';\nimport { createType } from '@polkadot/types';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Deposit (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const { accountPair } = props;\n\n  const defaultTransaction = createType('Transaction', {\n      receiver: createType('AccountId'),\n      token_id: createType('TokenId', 0),\n      prev_blk_num: createType('BlkNum', 0),\n      sender: createType('AccountId'),\n      signature: createType('Signature', \"\")\n    });\n  const [transaction, setTransaction] = useState(defaultTransaction);\n\n  const onChangeToken = token => {\n    setTransaction(prevTxn => {\n      let unsignedTxn = createType('UnsignedTransaction', {\n        receiver: createType('AccountId', accountPair.address),\n        token_id: createType('TokenId', token),\n        prev_blk_num: createType('BlkNum', prevTxn.prev_blk_num),\n      });\n      let signature = accountPair.sign(blake2AsU8a(unsignedTxn.toU8a()));\n      return createType('Transaction', {\n        ...unsignedTxn,\n        sender: createType('AccountId', accountPair.address),\n        signature: createType('Signature', signature)\n      })\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Deposit Token</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={(_, data) => { onChangeToken(data.value) }}\n            label='Token ID'\n            fluid\n            placeholder='ID of Token you control'\n            state={transaction.tokenId}\n            type='text'\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Add'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [transaction],\n              tx: api.tx.plasmaCash.deposit\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Grid, Form, Dropdown, Input } from 'semantic-ui-react';\n\nimport { blake2AsU8a } from '@polkadot/util-crypto';\nimport { createType } from '@polkadot/types';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Transfer (props) {\n  const { api, keyring } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const { accountPair } = props;\n\n  // Get the list of accounts we possess the private key for\n  const keyringOptions = keyring.getPairs().map(account => ({\n    key: account.address,\n    value: account.address,\n    text: account.meta.name.toUpperCase(),\n    icon: 'user'\n  }));\n\n  const defaultTransaction = createType('Transaction', {\n      receiver: createType('AccountId'),\n      token_id: createType('TokenId', 0),\n      prev_blk_num: createType('BlkNum', 0),\n      sender: createType('AccountId'),\n      signature: createType('Signature', \"\")\n    });\n  const [transaction, setTransaction] = useState(defaultTransaction);\n\n  const onChangeToken = token => {\n    setTransaction(prevTxn => {\n      let unsignedTxn = createType('UnsignedTransaction', {\n        receiver: createType('AccountId', prevTxn.receiver),\n        token_id: createType('TokenId', token),\n        prev_blk_num: createType('BlkNum', prevTxn.prev_blk_num),\n      });\n      let signature = accountPair.sign(blake2AsU8a(unsignedTxn.toU8a()));\n      return createType('Transaction', {\n        ...unsignedTxn,\n        sender: createType('AccountId', accountPair.address),\n        signature: createType('Signature', signature)\n      })\n    });\n  };\n\n  const onChangeReceiver = receiver => {\n    setTransaction(prevTxn => {\n      let unsignedTxn = createType('UnsignedTransaction', {\n        receiver: createType('AccountId', receiver),\n        token_id: createType('TokenId', prevTxn.token_id),\n        prev_blk_num: createType('BlkNum', prevTxn.prev_blk_num),\n      });\n      let signature = accountPair.sign(blake2AsU8a(unsignedTxn.toU8a()));\n      return createType('Transaction', {\n        ...unsignedTxn,\n        sender: createType('AccountId', accountPair.address),\n        signature: createType('Signature', signature)\n      })\n    });\n  };\n\n  return (\n    <Grid.Column>\n      <h1>Transfer Token</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={(_, data) => { onChangeToken(data.value) }}\n            label='Token ID'\n            fluid\n            placeholder='ID of Token you control'\n            type='text'\n          />\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            search\n            selection\n            clearable\n            placeholder=\"Select Receipient\"\n            options={keyringOptions}\n            onChange={(_, dropdown) => {\n              onChangeReceiver(dropdown.value);\n            }}\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Send'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [transaction],\n              tx: api.tx.plasmaCash.transfer\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState } from 'react';\nimport { Grid, Form, Input } from 'semantic-ui-react';\n\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\nexport default function Withdraw (props) {\n  const { api } = useSubstrate();\n  const [status, setStatus] = useState(null);\n  const { accountPair } = props;\n\n  const [formState, setFormState] = useState({\n    tokenId: \"\",\n  });\n  const { tokenId } = formState;\n\n  const onChange = (_, data) =>\n    setFormState(formState => ({\n        ...formState,\n        [data.state]: data.value\n      })\n    );\n\n  return (\n    <Grid.Column>\n      <h1>Withdraw Token</h1>\n      <Form>\n        <Form.Field>\n          <Input\n            onChange={onChange}\n            label='Token ID'\n            fluid\n            placeholder='ID of Token you control'\n            state='tokenId'\n            type='text'\n          />\n        </Form.Field>\n        <Form.Field>\n          <TxButton\n            accountPair={accountPair}\n            label='Remove'\n            setStatus={setStatus}\n            type='TRANSACTION'\n            attrs={{\n              params: [tokenId],\n              tx: api.tx.plasmaCash.withdraw\n            }}\n          />\n        </Form.Field>\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n","import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky } from 'semantic-ui-react';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport { SubstrateContextProvider, useSubstrate } from './substrate-lib';\nimport { DeveloperConsole } from './substrate-lib/components';\nimport Metadata from './Metadata';\nimport NodeInfo from './NodeInfo';\n\nimport AccountSelector from './AccountSelector';\nimport BlockNumber from './BlockNumber';\nimport TokenQuery from './TokenQuery';\nimport Events from './Events';\nimport Deposit from './Deposit';\nimport Transfer from './Transfer';\nimport Withdraw from './Withdraw';\n\nfunction Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n\n  const loader = text => (\n    <Dimmer active>\n      <Loader size='small'>{text}</Loader>\n    </Dimmer>\n  );\n\n  if (apiState === 'ERROR') return loader('Error connecting to the blockchain');\n  else if (apiState !== 'READY') return loader('Connecting to the blockchain');\n\n  if (keyringState !== 'READY') {\n    return loader(\n      \"Loading accounts (please review any extension's authorization)\"\n    );\n  }\n\n  const contextRef = createRef();\n\n  return (\n    <div ref={contextRef}>\n      <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n      </Sticky>\n      <Container>\n        <Grid divided>\n          <Grid.Row columns={4} stretched>\n            <NodeInfo />\n            <Metadata />\n            <BlockNumber />\n            <BlockNumber finalized />\n          </Grid.Row>\n          <Grid.Row columns={4} stretched>\n            <TokenQuery />\n            <Transfer accountPair={accountPair} />\n            <Deposit accountPair={accountPair} />\n            <Withdraw accountPair={accountPair} />\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Events />\n          </Grid.Row>\n        </Grid>\n        <DeveloperConsole />\n      </Container>\n    </div>\n  );\n}\n\nexport default function App () {\n  return (\n    <SubstrateContextProvider>\n      <Main />\n    </SubstrateContextProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}